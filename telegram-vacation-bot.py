# Telegram Vacation Bot (Teams, Roles, No external API)
# python-telegram-bot v20+ (async) + aiosqlite
# -----------------------------------------------------------------------------
# –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:
# - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: /start -> –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã -> –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (–°–ï–û/–û–≤–Ω–µ—Ä/–¢–∏–º–ª–∏–¥/–¢–µ—Ö–Ω–∞—Ä—å)
# - –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫: —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ (–ø–æ—à–∞–≥–æ–≤–æ), –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, –∑–∞–ø—Ä–µ—Ç –¥–∞—Ç (–¥–∏–∞–ø–∞–∑–æ–Ω + –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ), –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
# - –ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ team_id
# - –†–æ–ª–∏: ADMIN_ROLES = {CEO, OWNER, TIMLID, TECH}; USER_ROLES = {BAER, DESIGNER, FARMER, MANAGER, BUHGALTER}
# - –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏: –±—ã—Å—Ç—Ä—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–ª–∏ –≤—Ä—É—á–Ω—É—é; "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏
# - –†—É—Å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã
# - –ê–¥–º–∏–Ω–∫–∞:
#   * –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (username -> –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
#   * –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å) + –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
#   * –ó–∞–ø—Ä–µ—Ç –¥–∞—Ç (–¥–µ–Ω—å/–¥–∏–∞–ø–∞–∑–æ–Ω) + —Å–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–µ—Ç–∞
#   * –õ–∏–º–∏—Ç—ã (–Ω–∞ –≥–æ–¥/–∑–∞ –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫)
#   * –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π (–≤—Å–µ–º/–∑–∞–ø—Ä–µ—Ç –≤—Å–µ–º/–∑–∞–ø—Ä–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–æ–ª—è–º)
#   * –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ (–∏–Ω–ª–∞–π–Ω approve/reject)
#   * –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
#   * –≠–∫—Å–ø–æ—Ä—Ç CSV (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
#   * –õ—ë–≥–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
# - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∑–∞ 3 –¥–Ω—è –∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞ (JobQueue)
# -----------------------------------------------------------------------------

import os
import io
import csv
import logging
import asyncio
from telegram.error import BadRequest
from datetime import datetime, date, timedelta
from typing import Optional, List, Tuple

import aiosqlite
from telegram import __version__ as ptb_version
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)

# ====== CONFIG ======
TELEGRAM_TOKEN = "–¢–û–ö–ï–ù"
DB_FILE = os.getenv('VACATION_BOT_DB') or 'vacation_bot.db'

# ====== ROLES / UI ======
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª—é—á–∏ —Ä–æ–ª–µ–π (–∞–Ω–≥–ª), –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä—É—Å—Å–∫–∏–µ —è—Ä–ª—ã–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
ADMIN_ROLES = {'CEO', 'OWNER', 'TIMLID', 'TECH'}
USER_ROLES = {'BAER', 'DESIGNER', 'FARMER', 'MANAGER', 'BUHGALTER'}
ALL_ROLES = ADMIN_ROLES | USER_ROLES

ROLE_RU = {
    'CEO': '–°–ï–û',
    'OWNER': '–û–≤–Ω–µ—Ä',
    'TIMLID': '–¢–∏–º–ª–∏–¥',
    'TECH': '–¢–µ—Ö–Ω–∞—Ä—å',
    'BAER': '–ë–∞–µ—Ä',
    'DESIGNER': '–î–∏–∑–∞–π–Ω–µ—Ä',
    'FARMER': '–§–∞—Ä–º–µ—Ä',
    'MANAGER': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    'BUHGALTER': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
}

STATUS_HUMAN = {
    'pending': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
    'approved': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
    'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
}

E_APPLY = "üóìÔ∏è"
E_MY    = "üìÖ"
E_ALL   = "üë•"
E_TYPES = "üßæ"
E_ADMIN = "üõ†Ô∏è"
E_HELP  = "‚ùì"
E_HOME  = "üè†"
E_BACK  = "‚óÄÔ∏è"

# –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã
# allow_all | deny_all | deny_same_role
DEFAULT_OVERLAP = "allow_all"

# –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –ø–æ–∫–∞ –Ω–µ –Ω–∞–ø–∏—à—É—Ç –±–æ—Ç—É)
PRESET_ADMINS = {
    '1': 'TECH',
    '2': 'TIMLID',
    '3': 'CEO',
}

# ====== LOGGING ======
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== STATES ======
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
REG_TEAM_NAME = "REG_TEAM_NAME"
REG_ROLE      = "REG_ROLE"
REG_TYPES_Q   = "REG_TYPES_Q"
REG_OVERLAP_Q = "REG_OVERLAP_Q"
REG_FORBIDDEN_Q = "REG_FORBIDDEN_Q"
REG_ADD_USERS_Q = "REG_ADD_USERS_Q"

# –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ (–≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò –≤ –∞–¥–º–∏–Ω–∫–µ ‚Äî –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º)
TYPES_ADD_NAME = "TYPES_ADD_NAME"
TYPES_ADD_DAYS = "TYPES_ADD_DAYS"
TYPES_ADD_DESC = "TYPES_ADD_DESC"

# –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏
APPLY_TYPE    = "APPLY_TYPE"
APPLY_START   = "APPLY_START"
APPLY_END     = "APPLY_END"
APPLY_COMMENT = "APPLY_COMMENT"
APPLY_CONFIRM = "APPLY_CONFIRM"

# Bootstrap –º–∞—Å—Ç–µ—Ä (–±—ã—Å—Ç—Ä—ã–π)
BOOT_MAX_YEAR   = "BOOT_MAX_YEAR"
BOOT_MAX_SINGLE = "BOOT_MAX_SINGLE"
BOOT_OVERLAP    = "BOOT_OVERLAP"

# ====== MIGRATION / DB INIT ======
async def _column_exists(db, table: str, column: str) -> bool:
    cur = await db.execute(f"PRAGMA table_info({table})")
    cols = [r[1] for r in await cur.fetchall()]
    return column in cols

async def _add_col_if_missing(db, table: str, column: str, ddl: str):
    if not await _column_exists(db, table, column):
        await db.execute(ddl)

async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute('PRAGMA foreign_keys = ON;')

        # –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (—Å team_id —É–∂–µ –≤ —Å—Ö–µ–º–µ)
        await db.executescript("""
        CREATE TABLE IF NOT EXISTS teams(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tg_id INTEGER UNIQUE,
            username TEXT,
            full_name TEXT,
            role TEXT,
            team_id INTEGER REFERENCES teams(id),
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS vacation_types (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_id INTEGER REFERENCES teams(id),
            name TEXT,
            days_per_year INTEGER,
            description TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS vacations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_id INTEGER,
            user_id INTEGER,
            type_id INTEGER,
            start_date TEXT,
            end_date TEXT,
            days INTEGER,
            status TEXT DEFAULT 'pending',
            admin_comment TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS forbidden_dates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_id INTEGER,
            date TEXT,
            note TEXT
        );

        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT
        );

        CREATE TABLE IF NOT EXISTS admin_actions (
            admin_tg_id INTEGER PRIMARY KEY,
            vacation_id INTEGER,
            action TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS audit_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            actor_tg_id INTEGER,
            action TEXT,
            target TEXT,
            data TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """)
        await db.commit()

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –±–∞–∑ (–¥–æ–±–∞–≤–∏—Ç—å team_id –≥–¥–µ –Ω–µ—Ç)
        await _add_col_if_missing(db, "users", "team_id",
            "ALTER TABLE users ADD COLUMN team_id INTEGER REFERENCES teams(id)")
        await _add_col_if_missing(db, "vacation_types", "team_id",
            "ALTER TABLE vacation_types ADD COLUMN team_id INTEGER REFERENCES teams(id)")
        await _add_col_if_missing(db, "vacations", "team_id",
            "ALTER TABLE vacations ADD COLUMN team_id INTEGER")
        await _add_col_if_missing(db, "forbidden_dates", "team_id",
            "ALTER TABLE forbidden_dates ADD COLUMN team_id INTEGER")

        # Default Team
        await db.execute("INSERT OR IGNORE INTO teams(name) VALUES('Default Team')")
        cur = await db.execute("SELECT id FROM teams WHERE name='Default Team'")
        default_team_id = (await cur.fetchone())[0]

        # –ë—ç–∫–æ—Ñ–∏–ª–ª team_id –≥–¥–µ NULL
        await db.execute("UPDATE users SET team_id=? WHERE team_id IS NULL", (default_team_id,))
        await db.execute("UPDATE vacation_types SET team_id=? WHERE team_id IS NULL", (default_team_id,))
        await db.execute("""
            UPDATE vacations
            SET team_id = (SELECT u.team_id FROM users u WHERE u.id = vacations.user_id)
            WHERE team_id IS NULL
        """)
        await db.execute("UPDATE forbidden_dates SET team_id=? WHERE team_id IS NULL", (default_team_id,))
        await db.commit()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (per-team, –∫–ª—é—á–∏ –≤–∏–¥–∞ key:team_id)
        def_key_year = f"max_year_days:{default_team_id}"
        def_key_single = f"max_single_days:{default_team_id}"
        def_overlap = f"overlap_policy:{default_team_id}"
        await db.execute("INSERT OR IGNORE INTO settings(key,value) VALUES(?,?)", (def_key_year, '28'))
        await db.execute("INSERT OR IGNORE INTO settings(key,value) VALUES(?,?)", (def_key_single, '14'))
        await db.execute("INSERT OR IGNORE INTO settings(key,value) VALUES(?,?)", (def_overlap, DEFAULT_OVERLAP))

        # –¢–∏–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Default Team
        cur = await db.execute("SELECT 1 FROM vacation_types WHERE team_id=? LIMIT 1", (default_team_id,))
        if not await cur.fetchone():
            await db.execute(
                "INSERT INTO vacation_types(team_id, name, days_per_year, description) VALUES(?,?,?,?)",
                (default_team_id, '–û–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫', 28, '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–Ω–∏ –≤ –≥–æ–¥—É')
            )
            await db.execute(
                "INSERT INTO vacation_types(team_id, name, days_per_year, description) VALUES(?,?,?,?)",
                (default_team_id, '–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫', 30, '–ù–µ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π (–º–∞–∫—Å. –¥–Ω–µ–π –≤ –≥–æ–¥—É)')
            )

        # –ü—Ä–µ—Å–µ—Ç-–∞–¥–º–∏–Ω—ã (–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã)
        for uname, role in PRESET_ADMINS.items():
            cur = await db.execute('SELECT id FROM users WHERE username=?', (uname,))
            if not await cur.fetchone():
                await db.execute(
                    "INSERT INTO users(tg_id, username, full_name, role, team_id) VALUES(?,?,?,?,?)",
                    (None, uname, uname, role, default_team_id)
                )

        await db.commit()

# ====== SETTINGS HELPERS ======

# --- inline calendar helpers ---
import calendar
RU_MONTHS = ["", "–Ø–Ω–≤–∞—Ä—å","–§–µ–≤—Ä–∞–ª—å","–ú–∞—Ä—Ç","–ê–ø—Ä–µ–ª—å","–ú–∞–π","–ò—é–Ω—å","–ò—é–ª—å","–ê–≤–≥—É—Å—Ç","–°–µ–Ω—Ç—è–±—Ä—å","–û–∫—Ç—è–±—Ä—å","–ù–æ—è–±—Ä—å","–î–µ–∫–∞–±—Ä—å"]
RU_WEEKDAYS = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]

def _prev_month(y, m):
    return (y-1, 12) if m == 1 else (y, m-1)

def _next_month(y, m):
    return (y+1, 1) if m == 12 else (y, m+1)

def build_invite_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã", callback_data="invite:leave")],
        [InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="invite:decline")]
    ])

def build_calendar(year: int, month: int, scope: str, phase: str) -> InlineKeyboardMarkup:
    """
    scope: 'apply' | 'forbid'
    phase: 'start' | 'end'
    """
    cal = calendar.Calendar(firstweekday=0)  # –ü–Ω
    weeks = cal.monthdatescalendar(year, month)

    py, pm = _prev_month(year, month)
    ny, nm = _next_month(year, month)

    rows = []
    rows.append([
        InlineKeyboardButton(f"¬´ {RU_MONTHS[pm]} {py}", callback_data=f"calnav:{scope}:{phase}:{py}-{pm:02d}"),
        InlineKeyboardButton(f"{RU_MONTHS[month]} {year}", callback_data="noop"),
        InlineKeyboardButton(f"{RU_MONTHS[nm]} {ny} ¬ª", callback_data=f"calnav:{scope}:{phase}:{ny}-{nm:02d}"),
    ])
    rows.append([InlineKeyboardButton(w, callback_data="noop") for w in RU_WEEKDAYS])

    for week in weeks:
        line = []
        for d in week:
            if d.month != month:
                line.append(InlineKeyboardButton(" ", callback_data="noop"))
            else:
                line.append(InlineKeyboardButton(
                    str(d.day),
                    callback_data=f"calpick:{scope}:{phase}:{d.isoformat()}"
                ))
        rows.append(line)

    return InlineKeyboardMarkup(rows)

async def noop_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≥–ª—É—à–∏–º –∫–ª–∏–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É/–ø—É—Å—Ç—ã–º —è—á–µ–π–∫–∞–º
    await update.callback_query.answer()


async def get_setting(key: str) -> Optional[str]:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute('SELECT value FROM settings WHERE key=?', (key,))
        row = await cur.fetchone()
        return row[0] if row else None

async def set_setting(key: str, value: str):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("INSERT OR REPLACE INTO settings(key,value) VALUES(?,?)", (key, value))
        await db.commit()

async def get_team_setting(team_id: int, short_key: str, default: Optional[str] = None) -> str:
    val = await get_setting(f"{short_key}:{team_id}")
    return val if val is not None else (default if default is not None else "")

async def set_team_setting(team_id: int, short_key: str, value: str):
    await set_setting(f"{short_key}:{team_id}", value)

# ====== COMMON HELPERS ======
def is_admin_role(role: str) -> bool:
    return role in ADMIN_ROLES

def role_ru(role: str) -> str:
    return ROLE_RU.get(role, role)

def next_monday_from(d: date) -> date:
    ahead = (7 - d.weekday()) % 7
    if ahead == 0:
        ahead = 7
    return d + timedelta(days=ahead)

def nav_home_back() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:home"),
            InlineKeyboardButton(f"{E_HOME} –î–æ–º–æ–π", callback_data="menu:home"),
        ]
    ])

async def admin_show_menu(q, context, extra_text: str | None = None, extra_markup=None, parse_mode=None):
    desired_text = f"{E_ADMIN} –ê–¥–º–∏–Ω–∫–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        await q.edit_message_text(
            desired_text,
            reply_markup=build_admin_menu_markup()
        )
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            raise
    if extra_text or extra_markup:
        await context.bot.send_message(
            chat_id=q.from_user.id,
            text=extra_text or " ",
            reply_markup=extra_markup,
            parse_mode=parse_mode,
        )


async def log_action(actor_tg_id: int, action: str, target: str = '', data: str = ''):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            'INSERT INTO audit_logs(actor_tg_id, action, target, data) VALUES(?,?,?,?)',
            (actor_tg_id, action, target, data)
        )
        await db.commit()

# ====== USERS / TEAMS ======
async def get_team_by_name(name: str) -> Optional[dict]:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute('SELECT id, name FROM teams WHERE name=?', (name,))
        row = await cur.fetchone()
        if row:
            return {'id': row[0], 'name': row[1]}
        return None
    
async def get_team_name(team_id: Optional[int]) -> str:
    if not team_id:
        return "-"
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute("SELECT name FROM teams WHERE id=?", (team_id,))
        row = await cur.fetchone()
    return row[0] if row else "-"

async def create_team(name: str) -> int:
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("INSERT INTO teams(name) VALUES(?)", (name,))
        await db.commit()
        cur = await db.execute("SELECT id FROM teams WHERE name=?", (name,))
        return (await cur.fetchone())[0]

async def get_user_by_tg_id(tg_id: int) -> Optional[dict]:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            'SELECT id, tg_id, username, full_name, role, team_id FROM users WHERE tg_id=?',
            (tg_id,)
        )
        row = await cur.fetchone()
        if row:
            return dict(id=row[0], tg_id=row[1], username=row[2], full_name=row[3], role=row[4], team_id=row[5])
        return None

async def get_user_by_username(username: str, team_id: Optional[int] = None) -> Optional[dict]:
    if not username:
        return None
    username = username.lstrip('@')
    async with aiosqlite.connect(DB_FILE) as db:
        if team_id is None:
            cur = await db.execute(
                'SELECT id, tg_id, username, full_name, role, team_id '
                'FROM users WHERE username=? ORDER BY id DESC LIMIT 1',
                (username,)
            )
        else:
            cur = await db.execute(
                'SELECT id, tg_id, username, full_name, role, team_id FROM users WHERE username=? AND team_id=?',
                (username, team_id)
            )
        row = await cur.fetchone()
        if row:
            return dict(id=row[0], tg_id=row[1], username=row[2], full_name=row[3], role=row[4], team_id=row[5])
        return None

async def ensure_user_record(tg_user) -> dict:
    # –°–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing = await get_user_by_tg_id(tg_user.id)
    if existing:
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute(
                'UPDATE users SET username=?, full_name=? WHERE id=?',
                (tg_user.username or '', tg_user.full_name or '', existing['id'])
            )
            await db.commit()
        existing['username'] = tg_user.username or ''
        existing['full_name'] = tg_user.full_name or ''
        return existing

    # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ username ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º tg_id
    if tg_user.username:
        byname = await get_user_by_username(tg_user.username)
        if byname:
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute(
                    'UPDATE users SET tg_id=?, full_name=? WHERE id=?',
                    (tg_user.id, tg_user.full_name or '', byname['id'])
                )
                await db.commit()
            byname['tg_id'] = tg_user.id
            byname['full_name'] = tg_user.full_name or ''
            return byname

    # –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å (–Ω–∞ Default Team, —Ä–æ–ª—å MANAGER ‚Äî –Ω–æ —Å—Ä–∞–∑—É –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é)
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute("SELECT id FROM teams WHERE name='Default Team'")
        default_team_id = (await cur.fetchone())[0]
        await db.execute(
            'INSERT INTO users(tg_id, username, full_name, role, team_id) VALUES(?,?,?,?,?)',
            (tg_user.id, tg_user.username or '', tg_user.full_name or '', 'MANAGER', default_team_id)
        )
        await db.commit()
        cur = await db.execute('SELECT id, tg_id, username, full_name, role, team_id FROM users WHERE tg_id=?', (tg_user.id,))
        row = await cur.fetchone()
        return dict(id=row[0], tg_id=row[1], username=row[2], full_name=row[3], role=row[4], team_id=row[5])

# ====== TEXT/UI HELPERS ======
async def build_main_menu(role: str) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(f"{E_APPLY} –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="menu:apply")],
        [
            InlineKeyboardButton(f"{E_MY} –ú–æ–∏ –æ—Ç–ø—É—Å–∫–∞", callback_data="menu:my"),
            InlineKeyboardButton(f"{E_ALL} –û—Ç–ø—É—Å–∫–∞ –∑–∞ –≥–æ–¥", callback_data="menu:all"),
        ],
        [InlineKeyboardButton(f"{E_TYPES} –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤", callback_data="menu:types")],
        [InlineKeyboardButton(f"{E_HELP} –ü–æ–º–æ—â—å", callback_data="menu:help")],
    ]
    if is_admin_role(role):
        rows.insert(2, [InlineKeyboardButton(f"{E_ADMIN} –ê–¥–º–∏–Ω–∫–∞", callback_data="menu:admin")])
    return InlineKeyboardMarkup(rows)

async def build_remove_users_view(team_id: int, page: int = 0, per_page: int = 10):
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT id, full_name, username, role FROM users WHERE team_id=? ORDER BY full_name COLLATE NOCASE",
            (team_id,)
        )
        rows = await cur.fetchall()

    total = len(rows)
    if total == 0:
        text = "–í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:admin")]])
        return text, kb

    pages = (total + per_page - 1) // per_page
    page = max(0, min(page, pages - 1))
    start, end = page * per_page, page * per_page + per_page
    chunk = rows[start:end]

    lines = [f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{pages}):"]
    kbl = []
    for uid, fname, uname, role in chunk:
        label = f"üóë {fname or '(–±–µ–∑ –∏–º–µ–Ω–∏)'} @{uname or ''} ‚Äî {role_ru(role)}"
        kbl.append([InlineKeyboardButton(label, callback_data=f"admin:remove_pick:{uid}")])

    nav = []
    if pages > 1:
        if page > 0:
            nav.append(InlineKeyboardButton("‚üµ", callback_data=f"admin:remove_page:{page-1}"))
        if page < pages - 1:
            nav.append(InlineKeyboardButton("‚ü∂", callback_data=f"admin:remove_page:{page+1}"))
    if nav:
        kbl.append(nav)
    kbl.append([InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:admin")])

    return "\n".join(lines), InlineKeyboardMarkup(kbl)

async def get_my_vacations_text(user_tg_id: int) -> str:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            'SELECT v.id, t.name, v.start_date, v.end_date, v.days, v.status '
            'FROM vacations v JOIN vacation_types t ON v.type_id=t.id '
            'JOIN users u ON u.id=v.user_id '
            'WHERE u.tg_id=? '
            'ORDER BY v.created_at DESC',
            (user_tg_id,)
        )
        rows = await cur.fetchall()
    if not rows:
        return "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
    out = ["–í–∞—à–∏ –∑–∞—è–≤–∫–∏:"]
    for r in rows:
        out.append(f'#{r[0]} {r[1]}: {r[2]} ‚Äî {r[3]} ({r[4]} –¥–Ω) ‚Äî {STATUS_HUMAN.get(r[5], r[5])}')
    return "\n".join(out)

async def get_all_vacations_text(team_id: int, year: int) -> str:
    start = date(year, 1, 1).isoformat()
    end = date(year, 12, 31).isoformat()
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT v.id, u.full_name, t.name, v.start_date, v.end_date, v.status "
            "FROM vacations v "
            "JOIN users u ON v.user_id=u.id "
            "JOIN vacation_types t ON v.type_id=t.id "
            "WHERE v.team_id=? AND v.start_date BETWEEN ? AND ? "
            "ORDER BY v.start_date",
            (team_id, start, end)
        )
        rows = await cur.fetchall()
    if not rows:
        return f'–ù–µ—Ç –æ—Ç–ø—É—Å–∫–æ–≤ –∑–∞ {year}.'
    out = [f'–û—Ç–ø—É—Å–∫–∞ –∑–∞ {year}:']
    for r in rows:
        out.append(f'#{r[0]} {r[1]} ‚Äî {r[2]}: {r[3]} ‚Äî {r[4]} ({STATUS_HUMAN.get(r[5], r[5])})')
    return "\n".join(out)

async def get_types_text_and_list(team_id: int):
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT id, name, days_per_year, description FROM vacation_types WHERE team_id=? ORDER BY id",
            (team_id,)
        )
        rows = await cur.fetchall()
    if not rows:
        return "–¢–∏–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", []
    out = ['–¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤:']
    for r in rows:
        out.append(f'id:{r[0]} {r[1]} ‚Äî {r[2]} –¥–Ω–µ–π ‚Äî {r[3]}')
    return "\n".join(out), rows

async def build_year_picker() -> InlineKeyboardMarkup:
    y = datetime.now().year
    rows = [
        [
            InlineKeyboardButton(f"{y-1}", callback_data=f"menu:all:{y-1}"),
            InlineKeyboardButton(f"{y}", callback_data=f"menu:all:{y}"),
            InlineKeyboardButton(f"{y+1}", callback_data=f"menu:all:{y+1}")
        ],
        [InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:home")]
    ]
    return InlineKeyboardMarkup(rows)

async def build_apply_type_picker(team_id: int) -> InlineKeyboardMarkup:
    # –í –≠–¢–û–ú —à–∞–≥–µ ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤. –ö–Ω–æ–ø–∫—É "–≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é" –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
    _, rows = await get_types_text_and_list(team_id)
    if not rows:
        return InlineKeyboardMarkup([[InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:home")]])
    kb = []
    for r in rows:
        tid, name = r[0], r[1]
        kb.append([InlineKeyboardButton(f"{name} (id:{tid})", callback_data=f"menu_apply_type:{tid}")])
    kb.append([InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:home")])
    return InlineKeyboardMarkup(kb)

def build_quick_ranges_picker(type_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("7 –¥–Ω–µ–π —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞", callback_data=f"apply_quick:{type_id}:7")],
        [InlineKeyboardButton("14 –¥–Ω–µ–π —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞", callback_data=f"apply_quick:{type_id}:14")],
        [InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data="menu:apply_manual")],
        [InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:apply")]
    ])

def build_admin_menu_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="admin:add_user")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="admin:remove_user")],
        [InlineKeyboardButton("üßæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –æ—Ç–ø—É—Å–∫–æ–≤", callback_data="admin:types")],
        [
            InlineKeyboardButton("üö´ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–∞—Ç—É/–¥–∏–∞–ø–∞–∑–æ–Ω", callback_data="admin:forbid_date"),
            InlineKeyboardButton("‚ôªÔ∏è –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–∞—Ç—É", callback_data="admin:unforbid_date")
        ],
        [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–∞—Ç", callback_data="admin:list_forbidden")],
        [
            InlineKeyboardButton("‚öôÔ∏è –õ–∏–º–∏—Ç –Ω–∞ –≥–æ–¥", callback_data="admin:set_max_year"),
            InlineKeyboardButton("‚öôÔ∏è –õ–∏–º–∏—Ç –∑–∞ —Ä–∞–∑", callback_data="admin:set_max_single")
        ],
        [InlineKeyboardButton("üîó –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π", callback_data="admin:overlap")],
        [InlineKeyboardButton("üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data="admin:pending")],
        [InlineKeyboardButton("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="admin:staff_list")],
        [InlineKeyboardButton("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV (–≥–æ–¥)", callback_data="admin:export_csv")],
        [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≥–æ–¥)", callback_data="admin:analytics")],
        [InlineKeyboardButton(f"{E_BACK} –ù–∞–∑–∞–¥", callback_data="menu:home")]
    ])

def yes_no_kb(prefix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞", callback_data=f"{prefix}:yes"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{prefix}:no")]
    ])

def apply_skip_comment_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="apply:skip_comment")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="apply:cancel")]
    ])

def apply_confirm_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="apply:confirm"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="apply:cancel")
        ]
    ])

# ====== BUSINESS RULES ======
def dates_overlap(a_start: date, a_end: date, b_start: date, b_end: date) -> bool:
    return not (a_end < b_start or b_end < a_start)

async def is_range_forbidden(team_id: int, start: date, end: date) -> Optional[str]:
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute('SELECT date FROM forbidden_dates WHERE team_id=?', (team_id,))
        rows = await cur.fetchall()
    forbidden = set()
    for r in rows:
        try:
            forbidden.add(datetime.fromisoformat(r[0]).date())
        except Exception:
            continue
    d = start
    while d <= end:
        if d in forbidden:
            return d.isoformat()
        d += timedelta(days=1)
    return None

async def check_overlap_policy(team_id: int, start: date, end: date, role: str) -> Optional[str]:
    policy = await get_team_setting(team_id, 'overlap_policy', DEFAULT_OVERLAP)
    if policy == 'allow_all':
        return None
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT v.start_date, v.end_date, u.full_name, u.role "
            "FROM vacations v JOIN users u ON v.user_id=u.id "
            "WHERE v.team_id=? AND v.status IN ('pending','approved')",
            (team_id,)
        )
        rows = await cur.fetchall()
    for s, e, fname, r in rows:
        try:
            s_d = datetime.fromisoformat(s).date()
            e_d = datetime.fromisoformat(e).date()
        except Exception:
            continue
        if dates_overlap(start, end, s_d, e_d):
            if policy == 'deny_all':
                return f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –æ—Ç–ø—É—Å–∫–æ–º {fname} ({s}‚Äî{e}). –ü–æ–ª–∏—Ç–∏–∫–∞: –∑–∞–ø—Ä–µ—Ç –¥–ª—è –≤—Å–µ—Ö."
            if policy == 'deny_same_role' and r == role:
                return f"–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –æ—Ç–ø—É—Å–∫–æ–º {fname} ({s}‚Äî{e}) —Ç–æ–π –∂–µ —Ä–æ–ª–∏ ({role_ru(role)}). –ü–æ–ª–∏—Ç–∏–∫–∞: –∑–∞–ø—Ä–µ—Ç –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä–æ–ª–µ–π."
    return None

async def user_year_used_days(user_id: int, year: int) -> int:
    start = date(year,1,1).isoformat()
    end = date(year,12,31).isoformat()
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT COALESCE(SUM(days),0) FROM vacations WHERE user_id=? AND status='approved' AND start_date BETWEEN ? AND ?",
            (user_id, start, end)
        )
        v = await cur.fetchone()
        return int(v[0] or 0)

# ====== REGISTRATION FLOW ======
def reg_role_keyboard() -> InlineKeyboardMarkup:
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ
    kb = [[InlineKeyboardButton(role_ru(r), callback_data=f"reg:role:{r}")] for r in ['CEO','OWNER','TIMLID','TECH']]
    return InlineKeyboardMarkup(kb)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await ensure_user_record(update.effective_user)
    # –µ—Å–ª–∏ –Ω–µ—Ç "–Ω–∞—Å—Ç–æ—è—â–µ–π" –∫–æ–º–∞–Ω–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ Default Team) ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if user.get('team_id'):
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–∞ Default Team
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute("SELECT name FROM teams WHERE id=?", (user['team_id'],))
            rr = await cur.fetchone()
            team_name = rr[0] if rr else ""
    else:
        team_name = "Default Team"

    if team_name == "Default Team":
        context.user_data['reg_mode'] = True
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
        return REG_TEAM_NAME

    # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, *{update.effective_user.full_name}*! –í–∞—à–∞ —Ä–æ–ª—å ‚Äî *{role_ru(user['role'])}*.\n"
        f"–ö–æ–º–∞–Ω–¥–∞ ‚Äî *{team_name}*.",
        parse_mode='Markdown',
        reply_markup=await build_main_menu(user['role'])
    )

async def reg_team_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    team_name = update.message.text.strip()
    if not team_name:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        return REG_TEAM_NAME

    team = await get_team_by_name(team_name)
    if not team:
        team_id = await create_team(team_name)
        # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        await set_team_setting(team_id, 'max_year_days', '28')
        await set_team_setting(team_id, 'max_single_days', '14')
        await set_team_setting(team_id, 'overlap_policy', DEFAULT_OVERLAP)
        # —Ç–∏–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–ï —Å–æ–∑–¥–∞—ë–º ‚Äî –¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        context.user_data['reg_team_id'] = team_id
        context.user_data['reg_team_name'] = team_name
        await update.message.reply_text(
            f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' —Å–æ–∑–¥–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reg_role_keyboard()
        )
        return REG_ROLE
    else:
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ (—Ç–æ–∂–µ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä —Ä–æ–ª–∏)
        context.user_data['reg_team_id'] = team['id']
        context.user_data['reg_team_name'] = team['name']
        await update.message.reply_text(
            f"–ö–æ–º–∞–Ω–¥–∞ '{team['name']}' –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reg_role_keyboard()
        )
        return REG_ROLE

async def reg_role_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if not data.startswith("reg:role:"):
        return
    role = data.split(":")[2]
    team_id = context.user_data.get('reg_team_id')
    if not team_id:
        await q.edit_message_text("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å –∏ –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE users SET role=?, team_id=? WHERE tg_id=?", (role, team_id, q.from_user.id))
        await db.commit()

    await q.edit_message_text(
        f"–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ —Ä–æ–ª—å: {role_ru(role)}. –ö–æ–º–∞–Ω–¥–∞: {context.user_data.get('reg_team_name')}."
    )
    # —Å–ø—Ä–æ—Å–∏–º –ø—Ä–æ —Ç–∏–ø—ã
    await context.bot.send_message(
        chat_id=q.from_user.id,
        text="–°–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ —Å–µ–π—á–∞—Å?",
        reply_markup=yes_no_kb("reg_types")
    )
    return REG_TYPES_Q

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–µ—Ç–∫–∞ "–°–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤?" ---
async def reg_types_q_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    ans = q.data.split(':')[1]
    if ans == 'yes':
        await q.edit_message_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞:")
        return TYPES_ADD_NAME
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ‚Äî —Å—Ä–∞–∑—É –∫ –ø–æ–ª–∏—Ç–∏–∫–µ
    await q.edit_message_text("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –æ—Ç–ø—É—Å–∫–æ–≤ —Å–µ–π—á–∞—Å?", reply_markup=yes_no_kb("reg_overlap"))
    return REG_OVERLAP_Q

# –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –≤ –∞–¥–º–∏–Ω–∫–µ)
async def types_add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞:")
        return TYPES_ADD_NAME
    context.user_data['type_add_name'] = name
    await update.message.reply_text("–î–Ω–µ–π –≤ –≥–æ–¥—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    return TYPES_ADD_DAYS

async def types_add_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text.strip())
    except Exception:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 28:")
        return TYPES_ADD_DAYS
    context.user_data['type_add_days'] = days
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="types:add:skip_desc")]])
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=kb)
    return TYPES_ADD_DESC

async def types_add_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    desc = update.message.text.strip()
    return await _types_add_finalize(update, context, desc)

async def types_add_desc_skip_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    return await _types_add_finalize(q, context, "")

from telegram import Update  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞

async def _types_add_finalize(update_or_q, context: ContextTypes.DEFAULT_TYPE, desc: str):
    # update_or_q ‚Äî –ª–∏–±–æ Update (–∫–æ–≥–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç–æ–º), –ª–∏–±–æ CallbackQuery (–∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    is_update = isinstance(update_or_q, Update)
    actor = update_or_q.effective_user if is_update else update_or_q.from_user

    user = await ensure_user_record(actor)
    name = context.user_data.get('type_add_name')
    days = context.user_data.get('type_add_days')
    if not name or days is None:
        if is_update:
            await update_or_q.message.reply_text("–°–±–æ–π —à–∞–≥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–Ω–æ–≤–æ:")
        else:
            await update_or_q.edit_message_text("–°–±–æ–π —à–∞–≥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–Ω–æ–≤–æ:")
        return TYPES_ADD_NAME

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT INTO vacation_types(team_id,name,days_per_year,description) VALUES(?,?,?,?)",
            (user['team_id'], name, days, desc)
        )
        await db.commit()

    # –û—á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    context.user_data.pop('type_add_name', None)
    context.user_data.pop('type_add_days', None)

    msg = f'–¢–∏–ø "{name}" –¥–æ–±–∞–≤–ª–µ–Ω.'
    if is_update:
        await update_or_q.message.reply_text(msg)
        if context.user_data.get('reg_mode'):
            await update_or_q.message.reply_text(
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –æ—Ç–ø—É—Å–∫–æ–≤ —Å–µ–π—á–∞—Å?",
                reply_markup=yes_no_kb("reg_overlap")
            )
            return REG_OVERLAP_Q
        await update_or_q.message.reply_text("–ê–¥–º–∏–Ω–∫–∞:", )
        return ConversationHandler.END
    else:
        await update_or_q.edit_message_text(msg)
        if context.user_data.get('reg_mode'):
            await context.bot.send_message(
                chat_id=actor.id,
                text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –æ—Ç–ø—É—Å–∫–æ–≤ —Å–µ–π—á–∞—Å?",
                reply_markup=yes_no_kb("reg_overlap")
            )
            return REG_OVERLAP_Q
        await context.bot.send_message(chat_id=actor.id, text="–ê–¥–º–∏–Ω–∫–∞:", )
        return ConversationHandler.END


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π ---
async def reg_overlap_q_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    ans = q.data.split(':')[1]
    if ans == 'yes':
        user = await ensure_user_record(q.from_user)
        pol = await get_team_setting(user['team_id'], 'overlap_policy', DEFAULT_OVERLAP)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(("‚úÖ " if pol=="allow_all" else "") + "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º", callback_data="reg:set_overlap:allow_all")],
            [InlineKeyboardButton(("‚úÖ " if pol=="deny_all" else "") + "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Å–µ–º", callback_data="reg:set_overlap:deny_all")],
            [InlineKeyboardButton(("‚úÖ " if pol=="deny_same_role" else "") + "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–æ–ª—è–º", callback_data="reg:set_overlap:deny_same_role")],
        ])
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π:", reply_markup=kb)
        return REG_OVERLAP_Q
    # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    await q.edit_message_text("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–∞—Ç—ã —Å–µ–π—á–∞—Å?", reply_markup=yes_no_kb("reg_forbidden"))
    return REG_FORBIDDEN_Q

async def reg_set_overlap_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    pol = q.data.split(':')[2]
    user = await ensure_user_record(q.from_user)
    await set_team_setting(user['team_id'], 'overlap_policy', pol)
    await q.edit_message_text("–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await context.bot.send_message(q.from_user.id, "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–∞—Ç—ã —Å–µ–π—á–∞—Å?", reply_markup=yes_no_kb("reg_forbidden"))
    return REG_FORBIDDEN_Q

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∑–∞–ø—Ä–µ—Ç –¥–∞—Ç (–¥–∏–∞–ø–∞–∑–æ–Ω + –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ) ---
async def reg_forbidden_q_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    ans = q.data.split(':')[1]
    if ans == 'yes':
        today = date.today()
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:",
            reply_markup=build_calendar(today.year, today.month, "forbid", "start")
        )
        return REG_FORBIDDEN_Q
    await q.edit_message_text("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å?", reply_markup=yes_no_kb("reg_add_users"))
    return REG_ADD_USERS_Q

async def cal_forbid_nav_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, scope, phase, ym = q.data.split(":")
    y, m = map(int, ym.split("-"))
    title = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:" if phase == "start" \
        else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:"
    await q.edit_message_text(title, reply_markup=build_calendar(y, m, "forbid", phase))
    return REG_FORBIDDEN_Q

async def cal_forbid_pick_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, scope, phase, ds = q.data.split(":")
    d = datetime.fromisoformat(ds).date()

    if phase == "start":
        context.user_data['forbid_start'] = d
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:",
            reply_markup=build_calendar(d.year, d.month, "forbid", "end")
        )
        return REG_FORBIDDEN_Q

    start_d = context.user_data.get('forbid_start')
    if not start_d:
        today = date.today()
        await q.edit_message_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞:",
            reply_markup=build_calendar(today.year, today.month, "forbid", "start")
        )
        return REG_FORBIDDEN_Q

    end_d = d
    if end_d < start_d:
        start_d, end_d = end_d, start_d

    context.user_data['forbid_range'] = (start_d, end_d)
    context.user_data['admin_wizard'] = 'forbid_note_reg'
    await q.edit_message_text(
        "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin:forbid_note_skip_reg")]])
    )
    return REG_FORBIDDEN_Q


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
from telegram.ext import ConversationHandler

async def reg_add_users_q_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    ans = q.data.split(':')[1]

    if ans == 'yes':
        # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–µ–Ω–∞ ‚Üí –¥–∞–ª—å—à–µ —Ç–µ–∫—Å—Ç –ø–æ–π–º–∞–µ—Ç admin_text_handler
        context.user_data['admin_wizard'] = 'add_user_wait_username'
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å ¬´–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?¬ª
        context.user_data['reg_mode'] = True
        await q.edit_message_text("–®–∞–≥ 1: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –±—É–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
        return ConversationHandler.END

    # ¬´–ù–µ—Ç¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Å—Ç–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    context.user_data.pop('reg_mode', None)
    role = (await ensure_user_record(q.from_user))['role']
    await q.edit_message_text("–ì–æ—Ç–æ–≤–æ! üéâ")
    await context.bot.send_message(
        chat_id=q.from_user.id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=await build_main_menu(role)
    )
    return ConversationHandler.END



# ====== APPLY FLOW ======
async def cmd_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await ensure_user_record(update.effective_user)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞:",
        reply_markup=await build_apply_type_picker(user['team_id'])
    )
    return APPLY_TYPE

async def apply_manual_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    today = date.today()
    await q.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞:",
        reply_markup=build_calendar(today.year, today.month, "apply", "start")
    )
    return APPLY_START

async def cal_apply_nav_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, scope, phase, ym = q.data.split(":")
    y, m = map(int, ym.split("-"))
    title = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞:" if phase == "start" else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:"
    await q.edit_message_text(title, reply_markup=build_calendar(y, m, scope, phase))
    return APPLY_START if phase == "start" else APPLY_END

async def cal_apply_pick_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, scope, phase, ds = q.data.split(":")
    d = datetime.fromisoformat(ds).date()

    if phase == "start":
        context.user_data['apply_start'] = d.isoformat()
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            reply_markup=build_calendar(d.year, d.month, "apply", "end")
        )
        return APPLY_END
    else:
        context.user_data['apply_end'] = d.isoformat()
        # —Å—Ä–∞–∑—É –∫ –∫–æ–º–º–µ–Ω—Ç—É
        await context.bot.send_message(
            chat_id=q.from_user.id,
            text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
            reply_markup=apply_skip_comment_keyboard()
        )
        return APPLY_COMMENT

async def apply_quick_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –±—ã—Å—Ç—Ä—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–µ–Ω–∞ /apply
    q = update.callback_query
    await q.answer()
    _, type_id_s, days_s = q.data.split(":")
    user = await ensure_user_record(q.from_user)
    type_id = int(type_id_s)
    days = int(days_s)
    start_d = next_monday_from(date.today())
    end_d = start_d + timedelta(days=days-1)
    comment = f"–ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞: {days} –¥–Ω —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"
    await process_apply_submission(q, context, user, type_id, start_d, end_d, comment)
    await q.edit_message_text(
        f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n–ü–µ—Ä–∏–æ–¥: {start_d.isoformat()} ‚Äî {end_d.isoformat()} ({days} –¥–Ω).",
        reply_markup=nav_home_back()
    )
    return ConversationHandler.END


async def apply_type_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if not data.startswith('apply_type:'):
        return
    type_id = int(data.split(':', 1)[1])
    context.user_data['apply_type_id'] = type_id
    # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –±—ã—Å—Ç—Ä—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
    await q.edit_message_text(
        f"–¢–∏–ø –≤—ã–±—Ä–∞–Ω: id:{type_id}\n–í—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é:",
        reply_markup=build_quick_ranges_picker(type_id)
    )
    return APPLY_TYPE

async def apply_start_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    try:
        start = datetime.fromisoformat(txt).date()
    except Exception:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (YYYY-MM-DD).')
        return APPLY_START
    context.user_data['apply_start'] = start.isoformat()
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD):')
    return APPLY_END

async def apply_end_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    try:
        end = datetime.fromisoformat(txt).date()
    except Exception:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ (YYYY-MM-DD).')
        return APPLY_END
    context.user_data['apply_end'] = end.isoformat()
    await update.message.reply_text('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', reply_markup=apply_skip_comment_keyboard())
    return APPLY_COMMENT

async def apply_comment_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    context.user_data['apply_comment'] = comment
    # –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    type_id = context.user_data['apply_type_id']
    start = context.user_data['apply_start']
    end = context.user_data['apply_end']
    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–¢–∏–ø {type_id}, {start} ‚Äî {end}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}",
        reply_markup=apply_confirm_keyboard()
    )
    return APPLY_CONFIRM

async def apply_skip_comment_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    context.user_data['apply_comment'] = ''
    type_id = context.user_data['apply_type_id']
    start = context.user_data['apply_start']
    end = context.user_data['apply_end']
    await q.edit_message_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–¢–∏–ø {type_id}, {start} ‚Äî {end}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ‚Äî",
        reply_markup=apply_confirm_keyboard()
    )
    return APPLY_CONFIRM

async def apply_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data == 'apply:cancel':
        await q.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=nav_home_back())
        return ConversationHandler.END
    if data != 'apply:confirm':
        return
    user = await ensure_user_record(q.from_user)
    type_id = context.user_data['apply_type_id']
    start = datetime.fromisoformat(context.user_data['apply_start']).date()
    end = datetime.fromisoformat(context.user_data['apply_end']).date()
    comment = context.user_data.get('apply_comment', '')
    await process_apply_submission(q, context, user, type_id, start, end, comment)
    return ConversationHandler.END

async def apply_cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=nav_home_back())
    return ConversationHandler.END

# ====== CORE: CREATE VACATION ======
async def notify_admins_and_log(context, user, vac_id, type_id, start, end, days, comment):
    admins_msg = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{vac_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name')} (@{user.get('username')})\n"
        f"–¢–∏–ø: {type_id}\n"
        f"–ü–µ—Ä–∏–æ–¥: {start.isoformat()} ‚Äî {end.isoformat()} ({days} –¥–Ω)\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '‚Äî'}"
    )
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton('–£—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ', callback_data=f'admin_action:approve:{vac_id}'),
        InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', callback_data=f'admin_action:reject:{vac_id}')
    ]])

    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute('SELECT tg_id FROM users WHERE team_id=? AND role IN ("CEO","OWNER","TIMLID","TECH") AND tg_id IS NOT NULL', (user['team_id'],))
        rows = await cur.fetchall()
    for (admin_chat_id,) in rows:
        try:
            await context.bot.send_message(chat_id=admin_chat_id, text=admins_msg, reply_markup=kb)
        except Exception:
            logger.exception('Cannot notify admin %s', admin_chat_id)

    await log_action(user['tg_id'], 'apply_created', str(vac_id), f'{start.isoformat()}_{end.isoformat()}')

async def process_apply_submission(update_or_ctx, context, user, type_id: int, start: date, end: date, comment: str):
    if end < start:
        await context.bot.send_message(chat_id=user['tg_id'], text='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ ‚Äî –Ω–µ–≤–µ—Ä–Ω–æ.', reply_markup=nav_home_back())
        return
    days = (end - start).days + 1
    # –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–∞—Ç—ã
    forbid = await is_range_forbidden(user['team_id'], start, end)
    if forbid:
        await context.bot.send_message(chat_id=user['tg_id'], text=f'–í –¥–∏–∞–ø–∞–∑–æ–Ω–µ –µ—Å—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è –¥–∞—Ç–∞: {forbid}.', reply_markup=nav_home_back())
        return
    # –ª–∏–º–∏—Ç –∑–∞ –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫
    max_single = int(await get_team_setting(user['team_id'], 'max_single_days', '14'))
    if days > max_single:
        await context.bot.send_message(chat_id=user['tg_id'], text=f'–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –∑–∞ —Ä–∞–∑ ({max_single}).', reply_markup=nav_home_back())
        return
    # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    overlap_msg = await check_overlap_policy(user['team_id'], start, end, user['role'])
    if overlap_msg:
        await context.bot.send_message(chat_id=user['tg_id'], text=overlap_msg, reply_markup=nav_home_back())
        return
    # –ª–∏–º–∏—Ç –≤ –≥–æ–¥—É
    used = await user_year_used_days(user['id'], start.year)
    max_year = int(await get_team_setting(user['team_id'], 'max_year_days', '28'))
    if used + days > max_year:
        await context.bot.send_message(chat_id=user['tg_id'], text=f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–π –≤ {start.year} –≥–æ–¥—É: {used}/{max_year}.', reply_markup=nav_home_back())
        return
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å pending
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            'INSERT INTO vacations(team_id,user_id,type_id,start_date,end_date,days,status,admin_comment) VALUES(?,?,?,?,?,?,?,?)',
            (user['team_id'], user['id'], type_id, start.isoformat(), end.isoformat(), days, 'pending', comment)
        )
        await db.commit()
        cur = await db.execute('SELECT last_insert_rowid()')
        vac_id = (await cur.fetchone())[0]

    await context.bot.send_message(chat_id=user['tg_id'], text=f'–ó–∞—è–≤–∫–∞ #{vac_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.', reply_markup=nav_home_back())
    await notify_admins_and_log(context, user, vac_id, type_id, start, end, days, comment)

# ====== ADMIN APPROVE/REJECT ======
async def admin_action_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    parts = q.data.split(':')
    if len(parts) != 3:
        await q.edit_message_text('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', reply_markup=nav_home_back())
        return
    action, vac_id_s = parts[1], parts[2]
    try:
        vac_id = int(vac_id_s)
    except:
        await q.edit_message_text('–ù–µ–≤–µ—Ä–Ω—ã–π id –∑–∞—è–≤–∫–∏.', reply_markup=nav_home_back())
        return
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT OR REPLACE INTO admin_actions(admin_tg_id, vacation_id, action) VALUES(?,?,?)",
            (q.from_user.id, vac_id, action)
        )
        await db.commit()
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="admin:skip_comment")]])
    await q.edit_message_text(
        f'–í—ã –≤—ã–±—Ä–∞–ª–∏: { "—É—Ç–≤–µ—Ä–¥–∏—Ç—å" if action=="approve" else "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å" } –∑–∞—è–≤–∫—É #{vac_id}. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):',
        reply_markup=kb
    )

async def finalize_admin_decision(context: ContextTypes.DEFAULT_TYPE, admin_tg: int, vac_id: int, action: str, comment: str):
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT v.id, v.user_id, v.start_date, v.end_date, u.tg_id, u.team_id "
            "FROM vacations v JOIN users u ON v.user_id=u.id WHERE v.id=?",
            (vac_id,)
        )
        rv = await cur.fetchone()
        if not rv:
            return False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        v_id, user_id, start_date, end_date, user_tg, team_id = rv
        status = 'approved' if action == 'approve' else 'rejected'
        await db.execute('UPDATE vacations SET status=?, admin_comment=? WHERE id=?', (status, comment, vac_id))
        await db.execute('DELETE FROM admin_actions WHERE admin_tg_id=?', (admin_tg,))
        await db.commit()

    try:
        await context.bot.send_message(
            chat_id=user_tg,
            text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{vac_id}: {STATUS_HUMAN.get(status,status)}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or "‚Äî"}'
        )
    except Exception:
        logger.exception('Cannot notify user %s', user_tg)
    await log_action(admin_tg, f'admin_{action}', str(vac_id), comment)
    return True, status

async def admin_skip_comment_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    admin_tg = q.from_user.id

    # –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞?
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute('SELECT vacation_id, action FROM admin_actions WHERE admin_tg_id=?', (admin_tg,))
        row = await cur.fetchone()

    if not row:
        await q.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", reply_markup=nav_home_back())
        return ConversationHandler.END

    vac_id, action = row
    comment = ""
    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ (—Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ admin_text_handler)
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute(
            "SELECT v.id, v.user_id, v.start_date, v.end_date, u.tg_id "
            "FROM vacations v JOIN users u ON v.user_id=u.id WHERE v.id=?",
            (vac_id,)
        )
        rv = await cur.fetchone()
        if not rv:
            await q.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=nav_home_back())
            await db.execute('DELETE FROM admin_actions WHERE admin_tg_id=?', (admin_tg,))
            await db.commit()
            return ConversationHandler.END

        v_id, user_id, start_date, end_date, user_tg = rv
        status = 'approved' if action == 'approve' else 'rejected'
        await db.execute('UPDATE vacations SET status=?, admin_comment=? WHERE id=?', (status, comment, vac_id))
        await db.execute('DELETE FROM admin_actions WHERE admin_tg_id=?', (admin_tg,))
        await db.commit()

    try:
        await context.bot.send_message(
            chat_id=user_tg,
            text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{vac_id}: {STATUS_HUMAN.get(status,status)}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ‚Äî'
        )
    except Exception:
        logger.exception('Cannot notify user %s', user_tg)

    await q.edit_message_text(
        f'–ó–∞—è–≤–∫–∞ #{vac_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ {STATUS_HUMAN.get(status,status)} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.',
        reply_markup=nav_home_back()
    )
    await log_action(admin_tg, f'admin_{action}', str(vac_id), comment)
    return ConversationHandler.END


async def admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = await get_user_by_tg_id(update.effective_user.id)
    wizard = context.user_data.get('admin_wizard')

    # –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    if not caller or not is_admin_role(caller['role']):
        if wizard in ('add_user_wait_username', 'forbid_date_range_reg', 'forbid_note_reg'):
            pass
        else:
            return

    admin_tg = update.effective_user.id
    text = update.message.text.strip()

    if wizard == 'unforbid_date':
        try:
            d = datetime.fromisoformat(text).date()
        except Exception:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD", reply_markup=nav_home_back())
            return
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute('DELETE FROM forbidden_dates WHERE team_id=? AND date=?',
                            (caller['team_id'], d.isoformat()))
            await db.commit()
        context.user_data.pop('admin_wizard', None)
        await update.message.reply_text("–î–∞—Ç–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.")
        return

    # 1) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ approve/reject
    async with aiosqlite.connect(DB_FILE) as db:
        cur = await db.execute('SELECT vacation_id, action FROM admin_actions WHERE admin_tg_id=?', (admin_tg,))
        row = await cur.fetchone()
    if row:
        vac_id, action = row
        comment = "" if text == '/skip' else text
        ok, status = await finalize_admin_decision(context, admin_tg, vac_id, action, comment)
        if ok:
            await update.message.reply_text(
                f'–ó–∞—è–≤–∫–∞ #{vac_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ {STATUS_HUMAN.get(status,status)} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.',
                reply_markup=nav_home_back()
            )
        return
    

    # 2) –º–∏–Ω–∏-–≤–∏–∑–∞—Ä–¥—ã –∞–¥–º–∏–Ω–∫–∏ / —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    wizard = context.user_data.get('admin_wizard')
    if not wizard:
        return

    try:
        if wizard == 'add_user_wait_username':
            username = text.lstrip('@')
            if not username:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username", reply_markup=nav_home_back())
                return
            context.user_data['add_user_username'] = username
            kb = [[InlineKeyboardButton(role_ru(r), callback_data=f'admin:add_user_role:{r}')] for r in sorted(ALL_ROLES)]
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è @{username}:",
                reply_markup=InlineKeyboardMarkup(kb)
            )
            context.user_data['admin_wizard'] = 'add_user_pick_role'
            return

        if wizard == 'forbid_date':
            # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏–±–æ –æ–¥–Ω—É –¥–∞—Ç—É, –ª–∏–±–æ –¥–∏–∞–ø–∞–∑–æ–Ω "YYYY-MM-DD YYYY-MM-DD"
            parts = text.split()
            if len(parts) == 1:
                try:
                    d1 = datetime.fromisoformat(parts[0]).date()
                except Exception:
                    await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD YYYY-MM-DD", reply_markup=nav_home_back())
                    return
                # —Å–ø—Ä–æ—Å–∏–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                context.user_data['forbid_range'] = (d1, d1)
                await update.message.reply_text("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin:forbid_note_skip")]]))
                context.user_data['admin_wizard'] = 'forbid_note'
                return
            elif len(parts) == 2:
                try:
                    d1 = datetime.fromisoformat(parts[0]).date()
                    d2 = datetime.fromisoformat(parts[1]).date()
                except Exception:
                    await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD YYYY-MM-DD", reply_markup=nav_home_back())
                    return
                context.user_data['forbid_range'] = (d1, d2)
                await update.message.reply_text("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin:forbid_note_skip")]]))
                context.user_data['admin_wizard'] = 'forbid_note'
                return
            else:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD YYYY-MM-DD", reply_markup=nav_home_back())
                return

        if wizard == 'forbid_note':
            note = text
            d1, d2 = context.user_data.get('forbid_range', (None, None))
            if not d1:
                await update.message.reply_text("–°–±–æ–π: –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=nav_home_back())
                return
            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
            async with aiosqlite.connect(DB_FILE) as db:
                d = d1
                while d <= d2:
                    await db.execute('INSERT INTO forbidden_dates(team_id,date,note) VALUES(?,?,?)', (caller['team_id'], d.isoformat(), note))
                    d += timedelta(days=1)
                await db.commit()
            context.user_data.pop('forbid_range', None)
            context.user_data.pop('admin_wizard', None)
            await update.message.reply_text("–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", )
            return

        if wizard == 'forbid_date_range_reg':
            # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∂–¥—ë–º –¥–∏–∞–ø–∞–∑–æ–Ω
            parts = text.split()
            if len(parts) == 1:
                try:
                    d1 = datetime.fromisoformat(parts[0]).date()
                    d2 = d1
                except Exception:
                    await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD YYYY-MM-DD")
                    return
            elif len(parts) == 2:
                try:
                    d1 = datetime.fromisoformat(parts[0]).date()
                    d2 = datetime.fromisoformat(parts[1]).date()
                except Exception:
                    await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD YYYY-MM-DD")
                    return
            else:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD YYYY-MM-DD")
                return
            context.user_data['forbid_range'] = (d1, d2)
            await update.message.reply_text("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin:forbid_note_skip_reg")]]))
            context.user_data['admin_wizard'] = 'forbid_note_reg'
            return

        if wizard == 'forbid_note_reg':
            note = text
            d1, d2 = context.user_data.get('forbid_range', (None, None))
            if not d1:
                await update.message.reply_text("–°–±–æ–π: –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            async with aiosqlite.connect(DB_FILE) as db:
                d = d1
                while d <= d2:
                    await db.execute('INSERT INTO forbidden_dates(team_id,date,note) VALUES(?,?,?)', (caller['team_id'], d.isoformat(), note))
                    d += timedelta(days=1)
                await db.commit()
            context.user_data.pop('forbid_range', None)
            context.user_data.pop('admin_wizard', None)
            await update.message.reply_text("–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            await update.message.reply_text("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å?", reply_markup=yes_no_kb("reg_add_users"))
            return

        if wizard == 'set_max_year':
            try:
                v = int(text)
            except:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä.: 28", reply_markup=nav_home_back())
                return
            await set_team_setting(caller['team_id'], 'max_year_days', str(v))
            await update.message.reply_text(f'–õ–∏–º–∏—Ç –Ω–∞ –≥–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {v}', )
            context.user_data.pop('admin_wizard', None)
            return

        if wizard == 'set_max_single':
            try:
                v = int(text)
            except:
                await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä.: 14", reply_markup=nav_home_back())
                return
            await set_team_setting(caller['team_id'], 'max_single_days', str(v))
            await update.message.reply_text(f'–õ–∏–º–∏—Ç –∑–∞ –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {v}', )
            context.user_data.pop('admin_wizard', None)
            return

        if wizard == 'types_add':
            # —Å—é–¥–∞ –º–æ–∂–Ω–æ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ TYPES_ADD_*), –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            parts = [p.strip() for p in text.split('|')]
            if len(parts) < 2:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ | –î–Ω–µ–π_–≤_–≥–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", reply_markup=nav_home_back())
                return
            name = parts[0]
            try:
                days = int(parts[1])
            except:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=nav_home_back())
                return
            desc = parts[2] if len(parts) > 2 else ''
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute(
                    "INSERT INTO vacation_types(team_id,name,days_per_year,description) VALUES(?,?,?,?)",
                    (caller['team_id'], name, days, desc)
                )
                await db.commit()
            await update.message.reply_text(f'–¢–∏–ø "{name}" –¥–æ–±–∞–≤–ª–µ–Ω.', )
            context.user_data.pop('admin_wizard', None)
            return

        if wizard and wizard.startswith('types_edit:'):
            type_id = int(wizard.split(':')[1])
            parts = [p.strip() for p in text.split('|')]
            if len(parts) < 2:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ | –î–Ω–µ–π_–≤_–≥–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", reply_markup=nav_home_back())
                return
            name = parts[0]
            try:
                days = int(parts[1])
            except:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=nav_home_back())
                return
            desc = parts[2] if len(parts) > 2 else ''
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute(
                    "UPDATE vacation_types SET name=?, days_per_year=?, description=? WHERE id=? AND team_id=?",
                    (name, days, desc, type_id, caller['team_id'])
                )
                await db.commit()
            await update.message.reply_text(f'–¢–∏–ø –æ–±–Ω–æ–≤–ª—ë–Ω.', )
            context.user_data.pop('admin_wizard', None)
            return
        
        if wizard == 'types_add_name':
            name = text.strip()
            if not name:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞:")
                return
            context.user_data['type_add_name'] = name
            context.user_data['admin_wizard'] = 'types_add_days'
            await update.message.reply_text("–î–Ω–µ–π –≤ –≥–æ–¥—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
            return

        if wizard == 'types_add_days':
            try:
                days = int(text.strip())
            except Exception:
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 28:")
                return
            context.user_data['type_add_days'] = days
            kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin:type_add_skip_desc")]])
            context.user_data['admin_wizard'] = 'types_add_desc'
            await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):", reply_markup=kb)
            return

        if wizard == 'types_add_desc':
            desc = text.strip()
            name = context.user_data.get('type_add_name')
            days = context.user_data.get('type_add_days')
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute(
                    "INSERT INTO vacation_types(team_id,name,days_per_year,description) VALUES(?,?,?,?)",
                    (caller['team_id'], name, days, desc)
                )
                await db.commit()
            for k in ('type_add_name','type_add_days','admin_wizard'):
                context.user_data.pop(k, None)
            await update.message.reply_text(f'–¢–∏–ø "{name}" –¥–æ–±–∞–≤–ª–µ–Ω.')
            return

    except Exception as e:
        logger.exception("Admin wizard failed: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=nav_home_back())

# ====== ADMIN INLINE CALLBACKS (roles, types, overlap, forbid-note-skip) ======
async def admin_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user = await ensure_user_record(q.from_user)
    if not is_admin_role(user['role']):
        await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    key = q.data

    # –í—Å–µ–≥–¥–∞: —Å–ø–µ—Ä–≤–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º ¬´—à–∞–ø–∫—É¬ª –∞–¥–º–∏–Ω–∫–∏, –Ω–∏–∂–µ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    async def show(extra_text: str, kb: Optional[InlineKeyboardMarkup] = None, parse_mode=None):
        await admin_show_menu(q, context, extra_text, kb, parse_mode=parse_mode)

    # ---- –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤: –ø—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞) ----
    if key == "admin:type_add_skip_desc":
        name = context.user_data.get('type_add_name')
        days = context.user_data.get('type_add_days')
        if not name or days is None:
            for k in ('type_add_name', 'type_add_days', 'admin_wizard'):
                context.user_data.pop(k, None)
            await show("–°–±–æ–π —à–∞–≥–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: –ê–¥–º–∏–Ω–∫–∞ ‚Üí –¢–∏–ø—ã ‚Üí –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø.")
            return
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute(
                "INSERT INTO vacation_types(team_id,name,days_per_year,description) VALUES(?,?,?,?)",
                (user['team_id'], name, days, "")
            )
            await db.commit()
        for k in ('type_add_name', 'type_add_days', 'admin_wizard'):
            context.user_data.pop(k, None)
        await show(f'–¢–∏–ø "{name}" –¥–æ–±–∞–≤–ª–µ–Ω.')
        return

    # ---- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ----
    elif key == "admin:add_user":
        context.user_data['admin_wizard'] = 'add_user_wait_username'
        await show("–®–∞–≥ 1: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –±—É–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.", nav_home_back())
        return

    elif key.startswith('admin:add_user_role:'):
        role = key.split(':')[2]
        username = context.user_data.get('add_user_username')
        if not username:
            await show("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username.", nav_home_back())
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ –õ–Æ–ë–û–ô –∫–æ–º–∞–Ω–¥–µ
        existing_any = await get_user_by_username(username)

        # –ï—Å–ª–∏ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, –∞ —É–≤–µ–¥–æ–º–ª—è–µ–º
        if existing_any and existing_any['team_id'] and existing_any['team_id'] != user['team_id']:
            other_team = await get_team_name(existing_any['team_id'])
            this_team  = await get_team_name(user['team_id'])
            await show(
                f"@{username} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ ¬´{other_team}¬ª.\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            )

            # –ï—Å–ª–∏ –∑–Ω–∞–µ–º tg_id ‚Äî —É–≤–µ–¥–æ–º–∏–º —á–µ–ª–æ–≤–µ–∫–∞
            if existing_any.get('tg_id'):
                try:
                    await context.bot.send_message(
                        chat_id=existing_any['tg_id'],
                        text=(
                            f"–í–∞—Å —Ö–æ—Ç—è—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É: ¬´{this_team}¬ª.\n\n"
                            f"–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã ¬´{other_team}¬ª, "
                            "–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—Å —Å–º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å."
                        ),
                        reply_markup=build_invite_kb()
                    )
                except Exception:
                    logger.exception("Cannot notify invited user %s", existing_any['tg_id'])
            else:
                # tg_id –Ω–µ—Ç ‚Äî —á–µ–ª–æ–≤–µ–∫ –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É
                await context.bot.send_message(
                    chat_id=q.from_user.id,
                    text=(
                        f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: @{username} –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É, –ø–æ—ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. "
                        "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞–∂–∞—Ç—å /start."
                    )
                )

            # —á–∏—Å—Ç–∏–º –≤–∏–∑–∞—Ä–¥ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
            context.user_data.pop('add_user_username', None)
            context.user_data.pop('admin_wizard', None)
            return

        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É–∂–µ –≤ –≠–¢–û–ô –∫–æ–º–∞–Ω–¥–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Ä–æ–ª—å
        if existing_any and existing_any['team_id'] == user['team_id']:
            async with aiosqlite.connect(DB_FILE) as db:
                await db.execute("UPDATE users SET role=? WHERE id=?", (role, existing_any['id']))
                await db.commit()
            context.user_data.pop('add_user_username', None)
            context.user_data.pop('admin_wizard', None)
            await show(f'–†–æ–ª—å @{username} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {role_ru(role)}.')
            return

        # –ò–Ω–∞—á–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute(
                "INSERT OR REPLACE INTO users(tg_id, username, full_name, role, team_id) VALUES(?,?,?,?,?)",
                (None, username, username, role, user['team_id'])
            )
            await db.commit()
        context.user_data.pop('add_user_username', None)
        context.user_data.pop('admin_wizard', None)

        if context.user_data.get('reg_mode'):
            await show(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role_ru(role)}.')
            await context.bot.send_message(
                q.from_user.id,
                "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
                reply_markup=yes_no_kb("reg_add_users")
            )
        else:
            await show(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role_ru(role)}.')
        return

    # ---- –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: —Å–ø–∏—Å–æ–∫ ----
    elif key == "admin:remove_user":
        context.user_data.pop('admin_wizard', None)  # —á–∏—Å—Ç–∏–º –≤–∏–∑–∞—Ä–¥—ã –ø–æ —Ç–µ–∫—Å—Ç—É
        text, kb = await build_remove_users_view(user['team_id'], page=0)
        await show(text, kb)
        return

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
    elif key.startswith("admin:remove_page:"):
        page = int(key.split(":")[2])
        text, kb = await build_remove_users_view(user['team_id'], page=page)
        await show(text, kb)
        return

    # –í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Üí —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif key.startswith("admin:remove_pick:"):
        uid = int(key.split(":")[2])
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute(
                "SELECT id, full_name, username, role, tg_id FROM users WHERE id=? AND team_id=?",
                (uid, user['team_id'])
            )
            target = await cur.fetchone()

        if not target:
            await show("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        tid, fname, uname, role, tgid = target

        if tid == user['id']:
            await show("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        confirm_text = f"–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {fname or '(–±–µ–∑ –∏–º–µ–Ω–∏)'} @{uname or ''} ‚Äî {role_ru(role)}?"
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin:remove_confirm:{tid}")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin:remove_user")],
        ])
        await show(confirm_text, kb)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    elif key.startswith("admin:remove_confirm:"):
        uid = int(key.split(":")[2])
        if uid == user['id']:
            await show("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute("DELETE FROM vacations WHERE user_id=? AND team_id=?", (uid, user['team_id']))
            await db.execute("DELETE FROM users WHERE id=? AND team_id=?", (uid, user['team_id']))
            await db.commit()
        await show("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")
        # –û—Ç–ø—Ä–∞–≤–∏–º —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        text, kb = await build_remove_users_view(user['team_id'], page=0)
        await context.bot.send_message(chat_id=q.from_user.id, text=text, reply_markup=kb)
        return

    # ---- –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∞–¥–º–∏–Ω–∫–∏ ----
    elif key == "admin:forbid_date":
        context.user_data['admin_wizard'] = 'forbid_date'
        await show(
            "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ: `YYYY-MM-DD` –∏–ª–∏ `YYYY-MM-DD YYYY-MM-DD`",
            nav_home_back(),
            parse_mode='Markdown'
        )
        return

    elif key == "admin:unforbid_date":
        context.user_data['admin_wizard'] = 'unforbid_date'
        await show("–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–∞—Ç—É\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ: `YYYY-MM-DD`", nav_home_back(), parse_mode='Markdown')
        return

    elif key == "admin:list_forbidden":
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute('SELECT date, note FROM forbidden_dates WHERE team_id=? ORDER BY date', (user['team_id'],))
            rows = await cur.fetchall()
        txt = "–ù–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–∞—Ç." if not rows else "–ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –¥–∞—Ç—ã:\n" + "\n".join(f"{r[0]} ‚Äî {r[1] or ''}" for r in rows)
        await show(txt)
        return

    elif key == "admin:set_max_year":
        context.user_data['admin_wizard'] = 'set_max_year'
        await show("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –≥–æ–¥: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 28", nav_home_back())
        return

    elif key == "admin:set_max_single":
        context.user_data['admin_wizard'] = 'set_max_single'
        await show("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞ –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 14", nav_home_back())
        return

    elif key == "admin:types":
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute("SELECT id,name,days_per_year FROM vacation_types WHERE team_id=? ORDER BY id", (user['team_id'],))
            rows = await cur.fetchall()
        lines = ["–¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤:"]
        kb = []
        for (tid, name, days) in rows:
            lines.append(f"id:{tid} {name} ‚Äî {days} –¥–Ω")
            kb.append([
                InlineKeyboardButton(f"‚úèÔ∏è id:{tid}", callback_data=f"admin:type_edit:{tid}"),
                InlineKeyboardButton(f"üóë id:{tid}", callback_data=f"admin:type_del:{tid}")
            ])
        kb.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø (–ø–æ—à–∞–≥–æ–≤–æ)", callback_data="admin:type_add")])
        await show("\n".join(lines), InlineKeyboardMarkup(kb))
        return

    elif key == "admin:type_add":
        context.user_data['reg_mode'] = False
        context.user_data['admin_wizard'] = 'types_add_name'
        await show("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–ø—É—Å–∫–∞:", nav_home_back())
        return

    elif key.startswith("admin:type_edit:"):
        tid = int(key.split(':')[2])
        context.user_data['admin_wizard'] = f'types_edit:{tid}'
        await show("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞\n–§–æ—Ä–º–∞—Ç: `–ù–∞–∑–≤–∞–Ω–∏–µ | –î–Ω–µ–π_–≤_–≥–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ(–æ–ø—Ü)`", nav_home_back(), parse_mode='Markdown')
        return

    elif key.startswith("admin:type_del:"):
        tid = int(key.split(':')[2])
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin:type_del_confirm:{tid}")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin:types")]
        ])
        await show(f"–£–¥–∞–ª–∏—Ç—å —Ç–∏–ø id:{tid}?", kb)
        return

    elif key.startswith("admin:type_del_confirm:"):
        tid = int(key.split(':')[2])
        async with aiosqlite.connect(DB_FILE) as db:
            await db.execute("DELETE FROM vacation_types WHERE id=? AND team_id=?", (tid, user['team_id']))
            await db.commit()
        await show("–¢–∏–ø —É–¥–∞–ª—ë–Ω.")
        return

    elif key == "admin:overlap":
        pol = await get_team_setting(user['team_id'], 'overlap_policy', DEFAULT_OVERLAP)
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(("‚úÖ " if pol=="allow_all" else "") + "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º", callback_data="admin:overlap_set:allow_all")],
            [InlineKeyboardButton(("‚úÖ " if pol=="deny_all" else "") + "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Å–µ–º", callback_data="admin:overlap_set:deny_all")],
            [InlineKeyboardButton(("‚úÖ " if pol=="deny_same_role" else "") + "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–æ–ª—è–º", callback_data="admin:overlap_set:deny_same_role")],
        ])
        await show("–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –æ—Ç–ø—É—Å–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ:", kb)
        return

    elif key.startswith("admin:overlap_set:"):
        pol = key.split(':')[2]
        await set_team_setting(user['team_id'], 'overlap_policy', pol)
        await show("–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    elif key == "admin:pending":
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute(
                "SELECT v.id, u.full_name, t.name, v.start_date, v.end_date "
                "FROM vacations v "
                "JOIN users u ON v.user_id=u.id "
                "JOIN vacation_types t ON v.type_id=t.id "
                "WHERE v.team_id=? AND v.status='pending' ORDER BY v.start_date",
                (user['team_id'],)
            )
            rows = await cur.fetchall()
        if not rows:
            await show("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
            return
        lines = ["–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:"]
        kbl = []
        for (vid, fname, tname, s, e) in rows[:25]:
            lines.append(f"#{vid} {fname} ‚Äî {tname}: {s} ‚Äî {e}")
            kbl.append([
                InlineKeyboardButton(f"‚úÖ #{vid}", callback_data=f"admin_action:approve:{vid}"),
                InlineKeyboardButton(f"‚ùå #{vid}", callback_data=f"admin_action:reject:{vid}")
            ])
        await show("\n".join(lines), InlineKeyboardMarkup(kbl))
        return

    elif key == "admin:staff_list":
        year = datetime.now().year
        max_year = int(await get_team_setting(user['team_id'], 'max_year_days', '28'))
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute("SELECT id, full_name, username, role FROM users WHERE team_id=? ORDER BY full_name", (user['team_id'],))
            users = await cur.fetchall()
        lines = [f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–ª–∏–º–∏—Ç –Ω–∞ {year}: {max_year}):"]
        for (uid, fname, uname, role) in users:
            used = await user_year_used_days(uid, year)
            lines.append(f"{fname} (@{uname or ''}) ‚Äî {role_ru(role)}, –æ—Å—Ç–∞—Ç–æ–∫: {max_year - used} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {used})")
        await show("\n".join(lines))
        return

    elif key == "admin:export_csv":
        await show("–ì–æ—Ç–æ–≤–ª—é —ç–∫—Å–ø–æ—Ä—Ç...")
        year = datetime.now().year
        start, end = date(year,1,1).isoformat(), date(year,12,31).isoformat()
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute(
                "SELECT v.id, u.full_name, u.username, u.role, t.name, v.start_date, v.end_date, v.days, v.status, v.admin_comment "
                "FROM vacations v JOIN users u ON v.user_id=u.id JOIN vacation_types t ON v.type_id=t.id "
                "WHERE v.team_id=? AND v.start_date BETWEEN ? AND ? ORDER BY v.start_date",
                (user['team_id'], start, end)
            )
            rows = await cur.fetchall()
        buf = io.StringIO()
        writer = csv.writer(buf)
        writer.writerow(["id","full_name","username","role","type","start_date","end_date","days","status","comment"])
        for r in rows:
            writer.writerow(r)
        buf.seek(0)
        data = io.BytesIO(buf.read().encode('utf-8-sig'))
        data.seek(0)
        fname = f"vacations_{year}.csv"
        await context.bot.send_document(chat_id=q.from_user.id, document=InputFile(data, filename=fname), caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞ {year}")
        return

    elif key == "admin:analytics":
        year = datetime.now().year
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute(
                "SELECT v.start_date, v.end_date, v.days, u.role "
                "FROM vacations v JOIN users u ON v.user_id=u.id "
                "WHERE v.team_id=? AND v.status='approved' AND substr(v.start_date,1,4)=?",
                (user['team_id'], str(year))
            )
            rows = await cur.fetchall()
        by_month = {m:0 for m in range(1,13)}
        by_role = {}
        for s, e, d, role in rows:
            try:
                s_d = datetime.fromisoformat(s).date()
            except:
                continue
            by_month[s_d.month] += int(d or 0)
            by_role[role] = by_role.get(role, 0) + int(d or 0)
        lines = [f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {year}:"]
        lines.append("–ü–æ –º–µ—Å—è—Ü–∞–º (–¥–Ω–∏): " + ", ".join(f"{m}:{by_month[m]}" for m in range(1,13)))
        lines.append("–ü–æ —Ä–æ–ª—è–º (–¥–Ω–∏): " + (", ".join(f"{role_ru(k)}:{v}" for k,v in by_role.items()) if by_role else "‚Äî"))
        await show("\n".join(lines))
        return

    elif key == "admin:forbid_note_skip":
        rng = context.user_data.get('forbid_range')
        if not rng:
            await show("–°–±–æ–π: –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", nav_home_back())
            return
        d1, d2 = rng
        async with aiosqlite.connect(DB_FILE) as db:
            d = d1
            while d <= d2:
                await db.execute('INSERT INTO forbidden_dates(team_id,date,note) VALUES(?,?,?)', (user['team_id'], d.isoformat(), ''))
                d += timedelta(days=1)
            await db.commit()
        context.user_data.pop('forbid_range', None)
        context.user_data.pop('admin_wizard', None)
        await show("–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return

    elif key == "admin:forbid_note_skip_reg":
        rng = context.user_data.get('forbid_range')
        if not rng:
            await show("–°–±–æ–π: –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        d1, d2 = rng
        async with aiosqlite.connect(DB_FILE) as db:
            d = d1
            while d <= d2:
                await db.execute('INSERT INTO forbidden_dates(team_id,date,note) VALUES(?,?,?)', (user['team_id'], d.isoformat(), ''))
                d += timedelta(days=1)
            await db.commit()
        context.user_data.pop('forbid_range', None)
        context.user_data.pop('admin_wizard', None)
        await show("–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        await context.bot.send_message(q.from_user.id, "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å?", reply_markup=yes_no_kb("reg_add_users"))
        return

    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á
        await show("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∫–∏.")
        return

# ====== MENU CB (GENERAL) ======
async def cmd_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await ensure_user_record(update.effective_user)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await build_main_menu(user["role"]))

async def menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    user = await ensure_user_record(q.from_user)

    if data == "menu:home":
        for k in ('admin_wizard','add_user_username','forbid_range','forbid_start','type_add_name','type_add_days'):
            context.user_data.pop(k, None)
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await build_main_menu(user["role"]))
        return

    if data == "menu:apply":
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—É—Å–∫–∞:", reply_markup=await build_apply_type_picker(user["team_id"]))
        return

    if data.startswith("menu_apply_type:"):
        type_id = int(data.split(":")[1])
        await q.edit_message_text(
            f"–¢–∏–ø –≤—ã–±—Ä–∞–Ω: id:{type_id}\n–í—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é:",
            reply_markup=build_quick_ranges_picker(type_id)
        )
        return

    if data.startswith("apply_quick:"):
        _, type_id_s, days_s = data.split(":")
        type_id = int(type_id_s)
        days = int(days_s)
        start_d = next_monday_from(date.today())
        end_d = start_d + timedelta(days=days-1)
        comment = f"–ë—ã—Å—Ç—Ä–∞—è –∑–∞—è–≤–∫–∞: {days} –¥–Ω —Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"
        await process_apply_submission(q, context, user, type_id, start_d, end_d, comment)
        await q.edit_message_text(
            f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n–ü–µ—Ä–∏–æ–¥: {start_d.isoformat()} ‚Äî {end_d.isoformat()} ({days} –¥–Ω).",
            reply_markup=nav_home_back()
        )
        return

    if data == "menu:my":
        txt = await get_my_vacations_text(user['tg_id'])
        await q.edit_message_text(txt, reply_markup=nav_home_back())
        return

    if data == "menu:all":
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=await build_year_picker())
        return

    if data.startswith("menu:all:"):
        year = int(data.split(":")[2])
        txt = await get_all_vacations_text(user['team_id'], year)
        await q.edit_message_text(txt, reply_markup=nav_home_back())
        return

    if data == "menu:types":
        txt, _ = await get_types_text_and_list(user['team_id'])
        await q.edit_message_text(txt, reply_markup=nav_home_back())
        return

    if data == "menu:help":
        await q.edit_message_text(
            "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            f"{E_APPLY} –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Äî –±—ã—Å—Ç—Ä–æ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é.\n"
            f"{E_MY} –ú–æ–∏ –æ—Ç–ø—É—Å–∫–∞ ‚Äî —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.\n"
            f"{E_ALL} –û—Ç–ø—É—Å–∫–∞ –∑–∞ –≥–æ–¥ ‚Äî –∫—Ç–æ –∫–æ–≥–¥–∞ –≤ –æ—Ç–ø—É—Å–∫–µ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n"
            f"{E_TYPES} –¢–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤ ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã.\n\n"
            "–ê–¥–º–∏–Ω–∫–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ä–æ–ª–∏, –∑–∞–ø—Ä–µ—Ç—ã –¥–∞—Ç, –ª–∏–º–∏—Ç—ã, —Ç–∏–ø—ã, –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π, pending-–∑–∞—è–≤–∫–∏, —ç–∫—Å–ø–æ—Ä—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.",
            reply_markup=nav_home_back()
        )
        return

    if data == "menu:admin":
        if not is_admin_role(user["role"]):
            await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        # —Å–±—Ä–æ—Å –ª—é–±—ã—Ö –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≤–∏–∑–∞—Ä–¥–æ–≤
        for k in ('admin_wizard','add_user_username','forbid_range','forbid_start','type_add_name','type_add_days'):
            context.user_data.pop(k, None)
        await admin_show_menu(q, context)
        return


# ====== COMMANDS: whoami / setrole ======
async def cmd_whoami(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await ensure_user_record(update.effective_user)
    team_name = "-"
    if user.get('team_id'):
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute("SELECT name FROM teams WHERE id=?", (user['team_id'],))
            rr = await cur.fetchone()
            team_name = rr[0] if rr else "-"
    await update.message.reply_text(
        f"–í—ã: {user.get('full_name') or ''} (@{user.get('username') or ''})\n"
        f"–†–æ–ª—å: {role_ru(user['role'])}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {team_name}"
    )

async def cmd_setrole(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = await ensure_user_record(update.effective_user)
    if not is_admin_role(caller['role']):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrole @username ROLE")
        return
    username = context.args[0].lstrip('@')
    role = context.args[1].upper()
    if role not in ALL_ROLES:
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(role_ru(r) for r in sorted(ALL_ROLES))}")
        return
    user = await get_user_by_username(username, caller['team_id'])
    async with aiosqlite.connect(DB_FILE) as db:
        if not user:
            await db.execute(
                "INSERT INTO users(tg_id,username,full_name,role,team_id) VALUES(?,?,?,?,?)",
                (None, username, username, role, caller['team_id'])
            )
        else:
            await db.execute("UPDATE users SET role=? WHERE id=?", (role, user['id']))
        await db.commit()
    await update.message.reply_text(f"–†–æ–ª—å @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role_ru(role)}", reply_markup=nav_home_back())


# ====== DELETE (self-leave) ======
async def cmd_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã (—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î)."""
    user = await ensure_user_record(update.effective_user)

    # –ü–æ–ª—É—á–∏–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
    team_name = "-"
    if user.get('team_id'):
        async with aiosqlite.connect(DB_FILE) as db:
            cur = await db.execute("SELECT name FROM teams WHERE id=?", (user['team_id'],))
            row = await cur.fetchone()
            team_name = row[0] if row else "-"

    warn = (
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã ¬´{team_name}¬ª?\n\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏, –∞ –≤—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
    )
    await update.message.reply_text(warn, reply_markup=yes_no_kb("delete"))

async def invite_leave_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∂–∞–ª–∏ '–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã' –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –∏ /delete."""
    q = update.callback_query
    await q.answer()
    user = await ensure_user_record(q.from_user)
    team_name = await get_team_name(user.get('team_id'))
    warn = (
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã ¬´{team_name}¬ª?\n\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏, –∞ –≤—ã –±—É–¥–µ—Ç–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
    )
    try:
        await q.edit_message_text(warn, reply_markup=yes_no_kb("delete"))
    except BadRequest:
        await context.bot.send_message(q.from_user.id, warn, reply_markup=yes_no_kb("delete"))

async def invite_decline_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∂–∞–ª–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ' ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    q = update.callback_query
    await q.answer("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    try:
        await q.edit_message_text("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
    except BadRequest:
        pass


async def delete_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
    q = update.callback_query
    await q.answer()
    ans = q.data.split(":")[1]

    if ans == "no":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        user = await ensure_user_record(q.from_user)
        try:
            await q.edit_message_text("–û—Ç–º–µ–Ω–∞. –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∫–æ–º–∞–Ω–¥–µ.", reply_markup=await build_main_menu(user["role"]))
        except BadRequest:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å", –ø–æ—à–ª—ë–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
            await context.bot.send_message(q.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await build_main_menu(user["role"]))
        return

    if ans == "yes":
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∑–∞—è–≤–∫–∏
        user = await get_user_by_tg_id(q.from_user.id)
        if not user:
            await q.edit_message_text("–í—ã —É–∂–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ.")
            return

        async with aiosqlite.connect(DB_FILE) as db:
            # –°–Ω–∞—á–∞–ª–∞ —á–∏—Å—Ç–∏–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute('DELETE FROM vacations WHERE user_id=?', (user['id'],))
            # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–µ—Ä—ë–º ¬´–∑–∞–≤–∏—Å—à–∏–µ¬ª –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–¥–º–∏–Ω–æ–º
            await db.execute('DELETE FROM admin_actions WHERE admin_tg_id=?', (q.from_user.id,))
            # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await db.execute('DELETE FROM users WHERE id=?', (user['id'],))
            await db.commit()

        # –ß–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–∑–∞—Ä–¥—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ
        for k in ('admin_wizard','add_user_username','forbid_range','forbid_start',
                  'type_add_name','type_add_days','reg_mode'):
            context.user_data.pop(k, None)

        await q.edit_message_text(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –∫–æ–º–∞–Ω–¥–æ–π /start "
            "–∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å."
        )
        return

# ====== OTHER CMDS ======
async def cmd_myvacations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(await get_my_vacations_text(update.effective_user.id))

async def cmd_allvacations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await ensure_user_record(update.effective_user)
    if context.args:
        try:
            year = int(context.args[0])
        except:
            await update.message.reply_text("–ì–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /allvacations 2025")
            return
    else:
        year = datetime.now().year
    await update.message.reply_text(await get_all_vacations_text(user['team_id'], year))

async def cmd_list_types(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await ensure_user_record(update.effective_user)
    txt, _ = await get_types_text_and_list(user['team_id'])
    await update.message.reply_text(txt)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–º–µ–Ω—é\n"
        "/whoami ‚Äî –º–æ—è —Ä–æ–ª—å –∏ –∫–æ–º–∞–Ω–¥–∞\n"
        "/setrole @user ROLE ‚Äî —Å–º–µ–Ω–∞ —Ä–æ–ª–∏ (–∞–¥–º–∏–Ω)\n"
        "/apply ‚Äî –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)\n"
        "/myvacations ‚Äî –º–æ–∏ –æ—Ç–ø—É—Å–∫–∞\n"
        "/allvacations [YYYY] ‚Äî –æ—Ç–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞ –≥–æ–¥\n"
        "/list_types ‚Äî —Ç–∏–ø—ã –æ—Ç–ø—É—Å–∫–æ–≤\n"
        "/delete ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã –∏ —É–¥–∞–ª–∏—Ç—å —É—á—ë—Ç–∫—É",
    )

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Pong!")

# ====== BOOTSTRAP WIZARD (light) ======
async def cmd_bootstrap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = await ensure_user_record(update.effective_user)
    if not is_admin_role(caller['role']):
        await update.message.reply_text('–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.')
        return ConversationHandler.END
    await update.message.reply_text('–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –≥–æ–¥ (–Ω–∞–ø—Ä. 28):')
    return BOOT_MAX_YEAR

async def boot_max_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = await ensure_user_record(update.effective_user)
    try:
        v = int(update.message.text.strip())
    except:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 28')
        return BOOT_MAX_YEAR
    await set_team_setting(caller['team_id'], 'max_year_days', str(v))
    await update.message.reply_text('–õ–∏–º–∏—Ç –∑–∞ –æ–¥–∏–Ω –æ—Ç–ø—É—Å–∫ (–Ω–∞–ø—Ä. 14):')
    return BOOT_MAX_SINGLE

async def boot_max_single(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = await ensure_user_record(update.effective_user)
    try:
        v = int(update.message.text.strip())
    except:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 14')
        return BOOT_MAX_SINGLE
    await set_team_setting(caller['team_id'], 'max_single_days', str(v))
    pol = await get_team_setting(caller['team_id'], 'overlap_policy', DEFAULT_OVERLAP)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton(("‚úÖ " if pol=="allow_all" else "") + "–†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º", callback_data="boot:overlap:allow_all")],
        [InlineKeyboardButton(("‚úÖ " if pol=="deny_all" else "") + "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –≤—Å–µ–º", callback_data="boot:overlap:deny_all")],
        [InlineKeyboardButton(("‚úÖ " if pol=="deny_same_role" else "") + "–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–æ–ª—è–º", callback_data="boot:overlap:deny_same_role")],
    ])
    await update.message.reply_text('–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π:', reply_markup=kb)
    return BOOT_OVERLAP

async def boot_set_overlap_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    pol = q.data.split(':')[2]
    caller = await ensure_user_record(q.from_user)
    await set_team_setting(caller['team_id'], 'overlap_policy', pol)
    await q.edit_message_text('–ì–æ—Ç–æ–≤–æ!')
    return ConversationHandler.END

# ====== REMINDERS JOB ======
async def reminders_job(context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    soon = {today + timedelta(days=3), today + timedelta(days=1)}
    async with aiosqlite.connect(DB_FILE) as db:
        # –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for d in soon:
            cur = await db.execute(
                "SELECT v.id, u.tg_id, u.full_name, v.start_date, v.end_date "
                "FROM vacations v JOIN users u ON v.user_id=u.id "
                "WHERE v.status='approved' AND v.start_date=?",
                (d.isoformat(),)
            )
            rows = await cur.fetchall()
            for vid, tg, fname, s, e in rows:
                try:
                    when = "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è" if d == today + timedelta(days=3) else "–ó–∞–≤—Ç—Ä–∞"
                    await context.bot.send_message(tg, f"{when} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–ø—É—Å–∫ #{vid}: {s} ‚Äî {e}")
                except Exception:
                    pass

# ====== ERROR HANDLER ======
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled error: %s", context.error)

# ====== APP ======
async def main():
    await init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    # errors
    app.add_error_handler(on_error)

    # registration conversation
    reg_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REG_TEAM_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_team_name)],
            REG_ROLE: [CallbackQueryHandler(reg_role_cb, pattern='^reg:role:')],

            REG_TYPES_Q: [CallbackQueryHandler(reg_types_q_cb, pattern='^reg_types:(yes|no)$')],
            TYPES_ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, types_add_name)],
            TYPES_ADD_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, types_add_days)],
            TYPES_ADD_DESC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, types_add_desc),
                CallbackQueryHandler(types_add_desc_skip_cb, pattern='^types:add:skip_desc$'),
            ],

            REG_OVERLAP_Q: [
                CallbackQueryHandler(reg_overlap_q_cb, pattern='^reg_overlap:(yes|no)$'),
                CallbackQueryHandler(reg_set_overlap_cb, pattern='^reg:set_overlap:(allow_all|deny_all|deny_same_role)$'),
            ],
            REG_FORBIDDEN_Q: [
                CallbackQueryHandler(reg_forbidden_q_cb, pattern='^reg_forbidden:(yes|no)$'),
                CallbackQueryHandler(cal_forbid_nav_cb,  pattern='^calnav:forbid:(start|end):\d{4}-\d{2}$'),
                CallbackQueryHandler(cal_forbid_pick_cb, pattern='^calpick:forbid:(start|end):\d{4}-\d{2}-\d{2}$'),
            ],
            REG_ADD_USERS_Q: [CallbackQueryHandler(reg_add_users_q_cb, pattern='^reg_add_users:(yes|no)$')],
        },
        fallbacks=[],
        allow_reentry=True,
        per_message=False,
    )
    app.add_handler(reg_conv)

    app.add_handler(CallbackQueryHandler(reg_add_users_q_cb, pattern='^reg_add_users:(yes|no)$'))

    # main menu
    app.add_handler(CommandHandler('menu', cmd_menu))
    app.add_handler(CallbackQueryHandler(menu_cb, pattern='^(menu:(?!apply_manual).+|menu_apply_type:|apply_quick:)'))
    app.add_handler(CallbackQueryHandler(admin_skip_comment_cb, pattern='^admin:skip_comment$'))
    # –≥–ª—É—à–∏–ª–∫–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    app.add_handler(CallbackQueryHandler(noop_cb, pattern='^noop$'))

    # –∫–æ–º–∞–Ω–¥–∞
    app.add_handler(CommandHandler('delete', cmd_delete))

    # –∫–æ–ª–±—ç–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(delete_cb, pattern='^delete:(yes|no)$'))

    app.add_handler(CallbackQueryHandler(invite_leave_cb, pattern='^invite:leave$'))
    app.add_handler(CallbackQueryHandler(invite_decline_cb, pattern='^invite:decline$'))

    # apply conversation
    apply_conv = ConversationHandler(
        entry_points=[
            CommandHandler('apply', cmd_apply),
            CallbackQueryHandler(apply_manual_cb, pattern='^menu:apply_manual$'),
        ],
        states={
            # –≤—ã–±–æ—Ä —Ç–∏–ø–∞, –±—ã—Å—Ç—Ä—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ ‚Äî –≤—Å—ë –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è APPLY_TYPE
            APPLY_TYPE: [
                CallbackQueryHandler(apply_type_menu_cb, pattern='^apply_type:'),                  # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
                CallbackQueryHandler(apply_type_menu_cb, pattern='^menu_apply_type:\d+$'),         # –Ω–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
                CallbackQueryHandler(apply_manual_cb, pattern='^menu:apply_manual$'),
                CallbackQueryHandler(apply_quick_cb, pattern='^apply_quick:\d+:\d+$'),
            ],
            APPLY_START: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_start_msg),
                CallbackQueryHandler(cal_apply_nav_cb,  pattern='^calnav:apply:start:\d{4}-\d{2}$'),
                CallbackQueryHandler(cal_apply_pick_cb, pattern='^calpick:apply:start:\d{4}-\d{2}-\d{2}$'),
            ],
            APPLY_END: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_end_msg),
                CallbackQueryHandler(cal_apply_nav_cb,  pattern='^calnav:apply:end:\d{4}-\d{2}$'),
                CallbackQueryHandler(cal_apply_pick_cb, pattern='^calpick:apply:end:\d{4}-\d{2}-\d{2}$'),
            ],
            APPLY_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, apply_comment_msg),
                CallbackQueryHandler(apply_skip_comment_cb, pattern='^apply:skip_comment$'),
                CallbackQueryHandler(apply_confirm_cb,    pattern='^apply:cancel$'),
            ],
            APPLY_CONFIRM: [
                CallbackQueryHandler(apply_confirm_cb, pattern='^apply:(confirm|cancel)$'),
                CommandHandler('cancel', apply_cancel_cmd),
            ],
        },
        fallbacks=[CommandHandler('cancel', apply_cancel_cmd)],
        allow_reentry=True,
        per_message=False
    )
    app.add_handler(apply_conv)

    # admin ‚Äì order matters
    app.add_handler(CallbackQueryHandler(admin_action_cb, pattern='^admin_action:'))
    app.add_handler(CallbackQueryHandler(admin_menu_cb, pattern='^admin:'))

    # admin text wizard (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–µ–Ω–æ–≤)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, admin_text_handler))

    # commands
    app.add_handler(CommandHandler('whoami', cmd_whoami))
    app.add_handler(CommandHandler('setrole', cmd_setrole))
    app.add_handler(CommandHandler('myvacations', cmd_myvacations))
    app.add_handler(CommandHandler('allvacations', cmd_allvacations))
    app.add_handler(CommandHandler('list_types', cmd_list_types))
    app.add_handler(CommandHandler('help', cmd_help))
    app.add_handler(CommandHandler('ping', cmd_ping))

    # bootstrap wizard (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    boot_conv = ConversationHandler(
        entry_points=[CommandHandler('bootstrap', cmd_bootstrap)],
        states={
            BOOT_MAX_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, boot_max_year)],
            BOOT_MAX_SINGLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, boot_max_single)],
            BOOT_OVERLAP: [CallbackQueryHandler(boot_set_overlap_cb, pattern='^boot:overlap:(allow_all|deny_all|deny_same_role)$')],
        },
        fallbacks=[],
        allow_reentry=True,
        per_message=False
    )
    app.add_handler(boot_conv)

    # reminders
    if app.job_queue:
        app.job_queue.run_repeating(reminders_job, interval=3600, first=10)
    else:
        logger.warning("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ extras: pip install 'python-telegram-bot[job-queue]'")

    logger.info('Starting bot (PTB v%s).', ptb_version)
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling(drop_pending_updates=True)
        while True:
            await asyncio.sleep(3600)
    except asyncio.CancelledError:
        pass
    finally:
        try:
            await app.updater.stop()
            await app.stop()
            await app.shutdown()
        except Exception:
            pass

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Stopped by user")
